<?php

namespace app\controllers;

use app\models\ResultVoting;
use Yii;
use app\models\Student;
use app\models\StudentSearch;
use yii\base\View;
use yii\filters\AccessControl;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * StudentController implements the CRUD actions for Student model.
 */
class StudentController extends Controller
{

    const MARK_ACTIVE = 2;
    const ON_DEFENSE = 3;
    const DEFENDED = 2;
    const BULLETIN_VOTE_FOR = 1;
    const BULLETIN_VOTE_AGAINST = 2;
    const BULLETIN_INVALID = 3;
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Student models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new StudentSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        if(Yii::$app->request->isAjax) {
            $student = Student::getActiveStudent();
            var_dump($student);
//            ResultVoting::getRowTableResultByUserId(Yii::$app);
//            return Yii::$app->request->post('type');
        }

        if (Yii::$app->request->get('active')) {

            $previousActiveStudent = Student::getActiveStudent();
            $previousActiveStudent->status_student = self::DEFENDED;
            $previousActiveStudent->update();

            $student = Student::setActiveStudent(Yii::$app->request->get('student'));
            $student->status_student = self::ON_DEFENSE;
            $student->save();

            $allMemberCommission = ResultVoting::getUsersIdByRole('MemberCommission');

            $arrayAttributes = [
                'student_id' => Yii::$app->request->get('student'),
                'user_id' => '',
            ];


            foreach ($allMemberCommission as $item) {
                $objectResult = new ResultVoting();
                $objectResult->student_id = Yii::$app->request->get('student');
                $objectResult->user_id = ArrayHelper::getValue($item, 'user_id');
                $objectResult->bulletin_type_id = self::BULLETIN_INVALID;
                $objectResult->active = self::MARK_ACTIVE;
                $objectResult->insert();
            }

        }

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionIndexCommission()
    {
        $this->view->title = 'Студенты';
        $this->view->params['breadcrumbs'][] = $this->view->title;
        $student = Student::findOne(['status_student' => 3]);



        return $this->render('index-commission', [
            'data' => $student,
        ]);
    }


    /**
     * Displays a single Student model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Student model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Student();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing Student model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing Student model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Student model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Student the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Student::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException(Yii::t('app', 'The requested page does not exist.'));
    }
}
